; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_spi_bus.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_spi_bus.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Study_software\Keil_v5\ARM\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include -ID:\Study_software\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=541 -DSTM32F10X_HD -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_spi_bus.crf ..\..\User\bsp\src\bsp_spi_bus.c]
                          THUMB

                          AREA ||i.bsp_InitSPIBus||, CODE, READONLY, ALIGN=2

                  bsp_InitSPIBus PROC
;;;79     */
;;;80     void bsp_InitSPIBus(void)
000000  b538              PUSH     {r3-r5,lr}
;;;81     {
;;;82     #ifdef SOFT_SPI		/* 软件SPI */
;;;83     	GPIO_InitTypeDef  GPIO_InitStructure;
;;;84     
;;;85     	/* 打开GPIO时钟 */
;;;86     	RCC_APB2PeriphClockCmd(RCC_SCK | RCC_MOSI | RCC_MISO, ENABLE);	
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;87     
;;;88     	/* 配置SPI引脚SCK、MISO 和 MOSI为复用推挽模式 */
;;;89     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00000a  2003              MOVS     r0,#3
00000c  f88d0002          STRB     r0,[sp,#2]
;;;90     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;91     	GPIO_InitStructure.GPIO_Pin = PIN_SCK;
000016  2020              MOVS     r0,#0x20
;;;92     	GPIO_Init(PORT_SCK, &GPIO_InitStructure);
000018  4c0c              LDR      r4,|L1.76|
00001a  f8ad0000          STRH     r0,[sp,#0]            ;91
00001e  4669              MOV      r1,sp
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       GPIO_Init
;;;93     
;;;94     	GPIO_InitStructure.GPIO_Pin = PIN_MOSI;
000026  2080              MOVS     r0,#0x80
000028  f8ad0000          STRH     r0,[sp,#0]
;;;95     	GPIO_Init(PORT_MOSI, &GPIO_InitStructure);	
00002c  4669              MOV      r1,sp
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       GPIO_Init
;;;96     
;;;97     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;		/* MISO 设置为输入上拉 */
000034  2048              MOVS     r0,#0x48
000036  f88d0003          STRB     r0,[sp,#3]
;;;98     	GPIO_InitStructure.GPIO_Pin = PIN_MISO;
00003a  2040              MOVS     r0,#0x40
00003c  f8ad0000          STRH     r0,[sp,#0]
;;;99     	GPIO_Init(PORT_MISO, &GPIO_InitStructure);
000040  4669              MOV      r1,sp
000042  4620              MOV      r0,r4
000044  f7fffffe          BL       GPIO_Init
;;;100    #endif
;;;101    
;;;102    #ifdef HARD_SPI		/* 硬件SPI */
;;;103    	GPIO_InitTypeDef GPIO_InitStructure;
;;;104    
;;;105    	/* 开启 SPI 时钟 */
;;;106    	//RCC_APB2PeriphClockCmd(RCC_SPI, ENABLE);
;;;107    	
;;;108    	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
;;;109    	
;;;110    	/* 使能 GPIO 时钟 */
;;;111    	RCC_APB2PeriphClockCmd(RCC_SCK | RCC_MOSI | RCC_MISO, ENABLE);	
;;;112    
;;;113    	/* 配置 SPI引脚SCK、MISO 和 MOSI为复用推挽模式 */
;;;114    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
;;;115    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;116    	GPIO_InitStructure.GPIO_Pin = PIN_SCK;	
;;;117    	GPIO_Init(PORT_SCK, &GPIO_InitStructure);
;;;118    	
;;;119    	GPIO_InitStructure.GPIO_Pin = PIN_MISO;	
;;;120    	GPIO_Init(PORT_MISO, &GPIO_InitStructure);
;;;121    
;;;122    	GPIO_InitStructure.GPIO_Pin = PIN_MOSI;	
;;;123    	GPIO_Init(PORT_MOSI, &GPIO_InitStructure);
;;;124    		
;;;125    	bsp_SPI_Init(SPI_Direction_2Lines_FullDuplex | SPI_Mode_Master | SPI_DataSize_8b
;;;126    		| SPI_CPOL_Low | SPI_CPHA_1Edge | SPI_NSS_Soft | SPI_BaudRatePrescaler_64 | SPI_FirstBit_MSB);	
;;;127    	
;;;128    	/* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
;;;129    	SPI_HARD->I2SCFGR &= SPI_Mode_Select;		/* 选择SPI模式，不是I2S模式 */
;;;130    
;;;131    	/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
;;;132    	/* Write to SPIx CRCPOLY */
;;;133    	SPI_HARD->CRCPR = 7;		/* 一般不用 */
;;;134    
;;;135    
;;;136    	SPI_Cmd(SPI_HARD, DISABLE);			/* 先禁止SPI  */
;;;137    
;;;138    	SPI_Cmd(SPI_HARD, ENABLE);			/* 使能SPI  */
;;;139    #endif
;;;140    }
000048  bd38              POP      {r3-r5,pc}
;;;141    
                          ENDP

00004a  0000              DCW      0x0000
                  |L1.76|
                          DCD      0x40010800

                          AREA ||i.bsp_SetSpiSck||, CODE, READONLY, ALIGN=2

                  bsp_SetSpiSck PROC
;;;419    #ifdef SOFT_SPI		/* 软件SPI */
;;;420    void bsp_SetSpiSck(uint8_t _data)
000000  2120              MOVS     r1,#0x20
;;;421    {
000002  b110              CBZ      r0,|L2.10|
;;;422    	if (_data == 0)
;;;423    	{
;;;424    		SCK_0();
;;;425    	}
;;;426    	else
;;;427    	{
;;;428    		SCK_1();
000004  4802              LDR      r0,|L2.16|
                  |L2.6|
000006  6001              STR      r1,[r0,#0]            ;424
;;;429    	}
;;;430    }
000008  4770              BX       lr
                  |L2.10|
00000a  4801              LDR      r0,|L2.16|
00000c  1d00              ADDS     r0,r0,#4              ;424
00000e  e7fa              B        |L2.6|
;;;431    #endif
                          ENDP

                  |L2.16|
                          DCD      0x40010810

                          AREA ||i.bsp_SpiBusBusy||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusBusy PROC
;;;405    */
;;;406    uint8_t bsp_SpiBusBusy(void)
000000  4801              LDR      r0,|L3.8|
;;;407    {
;;;408    	return g_spi_busy;
000002  7800              LDRB     r0,[r0,#0]  ; g_spi_busy
;;;409    }
000004  4770              BX       lr
;;;410    
                          ENDP

000006  0000              DCW      0x0000
                  |L3.8|
                          DCD      ||.data||

                          AREA ||i.bsp_SpiBusEnter||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusEnter PROC
;;;379    */
;;;380    void bsp_SpiBusEnter(void)
000000  4901              LDR      r1,|L4.8|
;;;381    {
;;;382    	g_spi_busy = 1;
000002  2001              MOVS     r0,#1
000004  7008              STRB     r0,[r1,#0]
;;;383    }
000006  4770              BX       lr
;;;384    
                          ENDP

                  |L4.8|
                          DCD      ||.data||

                          AREA ||i.bsp_SpiBusExit||, CODE, READONLY, ALIGN=2

                  bsp_SpiBusExit PROC
;;;392    */
;;;393    void bsp_SpiBusExit(void)
000000  4901              LDR      r1,|L5.8|
;;;394    {
;;;395    	g_spi_busy = 0;
000002  2000              MOVS     r0,#0
000004  7008              STRB     r0,[r1,#0]
;;;396    }
000006  4770              BX       lr
;;;397    
                          ENDP

                  |L5.8|
                          DCD      ||.data||

                          AREA ||i.bsp_spiDelay||, CODE, READONLY, ALIGN=1

                  bsp_spiDelay PROC
;;;171    */
;;;172    void bsp_spiDelay(void)
000000  2000              MOVS     r0,#0
                  |L6.2|
;;;173    {
;;;174    	uint32_t i;
;;;175    
;;;176    	for (i = 0; i < 2; i++);
000002  1c40              ADDS     r0,r0,#1
000004  2802              CMP      r0,#2
000006  d3fc              BCC      |L6.2|
;;;177    }
000008  4770              BX       lr
;;;178    #endif
                          ENDP


                          AREA ||i.bsp_spiRead0||, CODE, READONLY, ALIGN=2

                  bsp_spiRead0 PROC
;;;234    */
;;;235    uint8_t bsp_spiRead0(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;236    {
;;;237    #ifdef SOFT_SPI		/* 软件SPI */
;;;238    	uint8_t i;
;;;239    	uint8_t read = 0;
000004  2400              MOVS     r4,#0
;;;240    
;;;241    	for (i = 0; i < 8; i++)
;;;242    	{
;;;243    		read = read<<1;
;;;244    
;;;245    		if (MISO_IS_HIGH())
;;;246    		{
;;;247    			read++;
;;;248    		}
;;;249    		SCK_1();
000006  4f10              LDR      r7,|L7.72|
000008  2620              MOVS     r6,#0x20
00000a  f8df903c          LDR      r9,|L7.72|
00000e  3710              ADDS     r7,r7,#0x10
000010  4625              MOV      r5,r4                 ;241
;;;250    		bsp_spiDelay();
;;;251    		SCK_0();
000012  f1070804          ADD      r8,r7,#4
                  |L7.22|
000016  0660              LSLS     r0,r4,#25             ;243
000018  0e04              LSRS     r4,r0,#24             ;243
00001a  2140              MOVS     r1,#0x40              ;245
00001c  4648              MOV      r0,r9                 ;245
00001e  f7fffffe          BL       GPIO_ReadInputDataBit
000022  2801              CMP      r0,#1                 ;245
000024  d101              BNE      |L7.42|
000026  1c64              ADDS     r4,r4,#1              ;245
000028  b2e4              UXTB     r4,r4                 ;247
                  |L7.42|
00002a  603e              STR      r6,[r7,#0]            ;249
00002c  f7fffffe          BL       bsp_spiDelay
000030  f8c86000          STR      r6,[r8,#0]
;;;252    		bsp_spiDelay();
000034  f7fffffe          BL       bsp_spiDelay
000038  1c6d              ADDS     r5,r5,#1
00003a  b2ed              UXTB     r5,r5                 ;241
00003c  2d08              CMP      r5,#8                 ;241
00003e  d3ea              BCC      |L7.22|
;;;253    	}
;;;254    	return read;
000040  4620              MOV      r0,r4
;;;255    #endif
;;;256    
;;;257    #ifdef HARD_SPI		/* 硬件SPI */
;;;258    	uint8_t read;
;;;259    
;;;260    	/* 等待发送缓冲区空 */
;;;261    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
;;;262    
;;;263    	/* 发送一个字节 */
;;;264    	SPI_I2S_SendData(SPI1, 0);
;;;265    
;;;266    	/* 等待数据接收完毕 */
;;;267    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
;;;268    
;;;269    	/* 读取接收到的数据 */
;;;270    	read = SPI_I2S_ReceiveData(SPI1);
;;;271    
;;;272    	/* 返回读到的数据 */
;;;273    	return read;
;;;274    #endif
;;;275    }
000042  e8bd87f0          POP      {r4-r10,pc}
;;;276    
                          ENDP

000046  0000              DCW      0x0000
                  |L7.72|
                          DCD      0x40010800

                          AREA ||i.bsp_spiRead1||, CODE, READONLY, ALIGN=2

                  bsp_spiRead1 PROC
;;;330    */
;;;331    uint8_t bsp_spiRead1(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;332    {
;;;333    #ifdef SOFT_SPI		/* 软件SPI */
;;;334    	uint8_t i;
;;;335    	uint8_t read = 0;
000004  2400              MOVS     r4,#0
;;;336    
;;;337    	for (i = 0; i < 8; i++)
;;;338    	{
;;;339    		SCK_0();
000006  4f10              LDR      r7,|L8.72|
;;;340    		bsp_spiDelay();
;;;341    		read = read << 1;
;;;342    		if (MISO_IS_HIGH())
000008  f8df903c          LDR      r9,|L8.72|
00000c  4625              MOV      r5,r4                 ;337
00000e  f1a90914          SUB      r9,r9,#0x14
000012  2620              MOVS     r6,#0x20              ;339
;;;343    		{
;;;344    			read++;
;;;345    		}
;;;346    		SCK_1();
000014  f1a70804          SUB      r8,r7,#4
                  |L8.24|
000018  603e              STR      r6,[r7,#0]            ;339
00001a  f7fffffe          BL       bsp_spiDelay
00001e  0660              LSLS     r0,r4,#25             ;341
000020  0e04              LSRS     r4,r0,#24             ;341
000022  2140              MOVS     r1,#0x40              ;342
000024  4648              MOV      r0,r9                 ;342
000026  f7fffffe          BL       GPIO_ReadInputDataBit
00002a  2801              CMP      r0,#1                 ;342
00002c  d101              BNE      |L8.50|
00002e  1c64              ADDS     r4,r4,#1              ;342
000030  b2e4              UXTB     r4,r4                 ;344
                  |L8.50|
000032  f8c86000          STR      r6,[r8,#0]
;;;347    		bsp_spiDelay();
000036  f7fffffe          BL       bsp_spiDelay
00003a  1c6d              ADDS     r5,r5,#1
00003c  b2ed              UXTB     r5,r5                 ;337
00003e  2d08              CMP      r5,#8                 ;337
000040  d3ea              BCC      |L8.24|
;;;348    	}
;;;349    	return read;
000042  4620              MOV      r0,r4
;;;350    #endif
;;;351    
;;;352    #ifdef HARD_SPI		/* 硬件SPI */
;;;353    	uint8_t read;
;;;354    
;;;355    	/* 等待发送缓冲区空 */
;;;356    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
;;;357    
;;;358    	/* 发送一个字节 */
;;;359    	SPI_I2S_SendData(SPI1, 0);
;;;360    
;;;361    	/* 等待数据接收完毕 */
;;;362    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
;;;363    
;;;364    	/* 读取接收到的数据 */
;;;365    	read = SPI_I2S_ReceiveData(SPI1);
;;;366    
;;;367    	/* 返回读到的数据 */
;;;368    	return read;
;;;369    #endif
;;;370    }
000044  e8bd87f0          POP      {r4-r10,pc}
;;;371    
                          ENDP

                  |L8.72|
                          DCD      0x40010814

                          AREA ||i.bsp_spiWrite0||, CODE, READONLY, ALIGN=2

                  bsp_spiWrite0 PROC
;;;187    */
;;;188    void bsp_spiWrite0(uint8_t _ucByte)
000000  b570              PUSH     {r4-r6,lr}
;;;189    {
;;;190    #ifdef SOFT_SPI		/* 软件SPI */
;;;191    	uint8_t i;
;;;192    
;;;193    	for(i = 0; i < 8; i++)
;;;194    	{
;;;195    		if (_ucByte & 0x80)
;;;196    		{
;;;197    			MOSI_1();
000002  4c0d              LDR      r4,|L9.56|
000004  2100              MOVS     r1,#0                 ;193
000006  2680              MOVS     r6,#0x80
;;;198    		}
;;;199    		else
;;;200    		{
;;;201    			MOSI_0();
000008  1d25              ADDS     r5,r4,#4
00000a  4602              MOV      r2,r0                 ;189
;;;202    		}
;;;203    		bsp_spiDelay();
;;;204    		SCK_1();
00000c  2320              MOVS     r3,#0x20
                  |L9.14|
00000e  0610              LSLS     r0,r2,#24             ;195
000010  d501              BPL      |L9.22|
000012  6026              STR      r6,[r4,#0]            ;197
000014  e000              B        |L9.24|
                  |L9.22|
000016  602e              STR      r6,[r5,#0]            ;201
                  |L9.24|
000018  f7fffffe          BL       bsp_spiDelay
00001c  6023              STR      r3,[r4,#0]
;;;205    		_ucByte <<= 1;
00001e  0650              LSLS     r0,r2,#25
000020  0e02              LSRS     r2,r0,#24
;;;206    		bsp_spiDelay();
000022  f7fffffe          BL       bsp_spiDelay
;;;207    		SCK_0();
000026  602b              STR      r3,[r5,#0]
000028  1c49              ADDS     r1,r1,#1
00002a  b2c9              UXTB     r1,r1                 ;193
00002c  2908              CMP      r1,#8                 ;193
00002e  d3ee              BCC      |L9.14|
;;;208    	}
;;;209    	bsp_spiDelay();
000030  e8bd4070          POP      {r4-r6,lr}
000034  f7ffbffe          B.W      bsp_spiDelay
;;;210    #endif
;;;211    
;;;212    #ifdef HARD_SPI		/* 硬件SPI */
;;;213    	/* 等待发送缓冲区空 */
;;;214    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
;;;215    
;;;216    	/* 发送一个字节 */
;;;217    	SPI_I2S_SendData(SPI1, _ucByte);
;;;218    
;;;219    	/* 等待数据接收完毕 */
;;;220    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
;;;221    
;;;222    	/* 读取接收到的数据 */
;;;223    	SPI_I2S_ReceiveData(SPI1);
;;;224    #endif
;;;225    }
;;;226    
                          ENDP

                  |L9.56|
                          DCD      0x40010810

                          AREA ||i.bsp_spiWrite1||, CODE, READONLY, ALIGN=2

                  bsp_spiWrite1 PROC
;;;284    */
;;;285    void bsp_spiWrite1(uint8_t _ucByte)
000000  b570              PUSH     {r4-r6,lr}
;;;286    {
;;;287    #ifdef SOFT_SPI		/* 软件SPI */
;;;288    	uint8_t i;
;;;289    
;;;290    	for(i = 0; i < 8; i++)
;;;291    	{
;;;292    		if (_ucByte & 0x80)
;;;293    		{
;;;294    			MOSI_1();
000002  4c0c              LDR      r4,|L10.52|
000004  2100              MOVS     r1,#0                 ;290
000006  2680              MOVS     r6,#0x80
;;;295    		}
;;;296    		else
;;;297    		{
;;;298    			MOSI_0();
000008  1d25              ADDS     r5,r4,#4
00000a  4602              MOV      r2,r0                 ;286
;;;299    		}
;;;300    		SCK_0();
00000c  2320              MOVS     r3,#0x20
                  |L10.14|
00000e  0610              LSLS     r0,r2,#24             ;292
000010  d501              BPL      |L10.22|
000012  6026              STR      r6,[r4,#0]            ;294
000014  e000              B        |L10.24|
                  |L10.22|
000016  602e              STR      r6,[r5,#0]            ;298
                  |L10.24|
000018  602b              STR      r3,[r5,#0]
;;;301    		_ucByte <<= 1;
00001a  0650              LSLS     r0,r2,#25
00001c  0e02              LSRS     r2,r0,#24
;;;302    		bsp_spiDelay();
00001e  f7fffffe          BL       bsp_spiDelay
;;;303    		SCK_1();				/* SCK上升沿采集数据, SCK空闲时为高电平 */
000022  6023              STR      r3,[r4,#0]
;;;304    		bsp_spiDelay();
000024  f7fffffe          BL       bsp_spiDelay
000028  1c49              ADDS     r1,r1,#1
00002a  b2c9              UXTB     r1,r1                 ;290
00002c  2908              CMP      r1,#8                 ;290
00002e  d3ee              BCC      |L10.14|
;;;305    	}
;;;306    #endif
;;;307    
;;;308    #ifdef HARD_SPI		/* 硬件SPI */
;;;309    	/* 等待发送缓冲区空 */
;;;310    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_TXE) == RESET);
;;;311    
;;;312    	/* 发送一个字节 */
;;;313    	SPI_I2S_SendData(SPI1, _ucByte);
;;;314    
;;;315    	/* 等待数据接收完毕 */
;;;316    	while(SPI_I2S_GetFlagStatus(SPI1, SPI_I2S_FLAG_RXNE) == RESET);
;;;317    
;;;318    	/* 读取接收到的数据 */
;;;319    	SPI_I2S_ReceiveData(SPI1);
;;;320    #endif
;;;321    }
000030  bd70              POP      {r4-r6,pc}
;;;322    
                          ENDP

000032  0000              DCW      0x0000
                  |L10.52|
                          DCD      0x40010810

                          AREA ||.data||, DATA, ALIGN=0

                  g_spi_busy
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_spi_bus.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_spi_bus_c_c88bcf96____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_bsp_spi_bus_c_c88bcf96____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_bsp_spi_bus_c_c88bcf96____REVSH|
#line 128
|__asm___13_bsp_spi_bus_c_c88bcf96____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
