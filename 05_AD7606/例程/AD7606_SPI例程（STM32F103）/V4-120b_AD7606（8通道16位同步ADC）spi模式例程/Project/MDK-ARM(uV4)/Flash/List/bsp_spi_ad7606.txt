; generated by Component: ARM Compiler 5.06 update 7 (build 960) Tool: ArmCC [4d365d]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_spi_ad7606.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_spi_ad7606.d --cpu=Cortex-M3 --apcs=interwork -O3 --diag_suppress=9931,870 -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Include -I..\..\User\bsp -I..\..\User\bsp\inc -I..\..\User\app\inc -I..\..\User\fonts -I..\..\User\images -I..\..\User\uIP\uip -I..\..\User\uIP\http -I..\..\User\uIP\dm9000 -I..\..\User\FatFS\src -I..\..\User\usb_mass -I..\..\User\CH376\inc -I.\RTE\_Flash -ID:\Study_software\Keil_v5\ARM\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include -ID:\Study_software\Keil_v5\ARM\Packs\Keil\STM32F1xx_DFP\2.2.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=541 -DSTM32F10X_HD -D_RTE_ -DUSE_STDPERIPH_DRIVER -DSTM32F10X_HD --omf_browse=.\flash\obj\bsp_spi_ad7606.crf ..\..\User\bsp\src\bsp_spi_ad7606.c]
                          THUMB

                          AREA ||i.AD7606_CfgSpiHard||, CODE, READONLY, ALIGN=2

                  AD7606_CfgSpiHard PROC
;;;133    */
;;;134    void AD7606_CfgSpiHard(void)
000000  b510              PUSH     {r4,lr}
;;;135    {
000002  b086              SUB      sp,sp,#0x18
;;;136    	SPI_InitTypeDef  SPI_InitStructure;
;;;137    
;;;138    	/* 配置SPI硬件参数 */
;;;139    	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;	/* 数据方向：2线全双工 */
000004  2000              MOVS     r0,#0
000006  f8ad0000          STRH     r0,[sp,#0]
;;;140    	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;		/* STM32的SPI工作模式 ：主机模式 */
00000a  f44f7182          MOV      r1,#0x104
00000e  f8ad1002          STRH     r1,[sp,#2]
;;;141    	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;	/* 数据位长度 ： 8位 */
000012  f8ad0004          STRH     r0,[sp,#4]
;;;142    	/* SPI_CPOL和SPI_CPHA结合使用决定时钟和数据采样点的相位关系、
;;;143    	   本例配置: 总线空闲是高电平,第2个边沿（上升沿采样数据)
;;;144    	*/
;;;145    	SPI_InitStructure.SPI_CPOL = SPI_CPOL_High;			/* 时钟上升沿采样数据 */
000016  2102              MOVS     r1,#2
000018  f8ad1006          STRH     r1,[sp,#6]
;;;146    	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;		/* 时钟的第2个边沿采样数据 */
00001c  2101              MOVS     r1,#1
00001e  f8ad1008          STRH     r1,[sp,#8]
;;;147    	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;			/* 片选控制方式：软件控制 */
000022  0249              LSLS     r1,r1,#9
000024  f8ad100a          STRH     r1,[sp,#0xa]
;;;148    
;;;149    	/* 设置波特率预分频系数 SPI_BaudRatePrescaler_64 实测SCK周期 800ns ，12.5MHz */
;;;150    	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_64;
000028  2128              MOVS     r1,#0x28
00002a  f8ad100c          STRH     r1,[sp,#0xc]
;;;151    
;;;152    	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;	/* 数据位传输次序：高位先传 */
00002e  f8ad000e          STRH     r0,[sp,#0xe]
;;;153    	SPI_InitStructure.SPI_CRCPolynomial = 7;			/* CRC多项式寄存器，复位后为7。本例程不用 */
000032  2007              MOVS     r0,#7
;;;154    	SPI_Init(SPI1, &SPI_InitStructure);
000034  4c06              LDR      r4,|L1.80|
000036  f8ad0010          STRH     r0,[sp,#0x10]         ;153
00003a  4669              MOV      r1,sp
00003c  4620              MOV      r0,r4
00003e  f7fffffe          BL       SPI_Init
;;;155    
;;;156    	SPI_Cmd(SPI1, ENABLE);				/* 使能SPI  */
000042  2101              MOVS     r1,#1
000044  4620              MOV      r0,r4
000046  f7fffffe          BL       SPI_Cmd
;;;157    }
00004a  b006              ADD      sp,sp,#0x18
00004c  bd10              POP      {r4,pc}
;;;158    
                          ENDP

00004e  0000              DCW      0x0000
                  |L1.80|
                          DCD      0x40013000

                          AREA ||i.AD7606_ConfigGPIO||, CODE, READONLY, ALIGN=2

                  AD7606_ConfigGPIO PROC
;;;91     */
;;;92     static void AD7606_ConfigGPIO(void)
000000  b538              PUSH     {r3-r5,lr}
;;;93     {
;;;94     	GPIO_InitTypeDef GPIO_InitStructure;
;;;95     
;;;96     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_AFIO,ENABLE);		/* PB3默认为JTDO功能。将PB3口复用为普通IO口 */
000002  2101              MOVS     r1,#1
000004  4608              MOV      r0,r1
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;97     	
;;;98     	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable, ENABLE);//关闭jtag , 开启swd
00000a  2101              MOVS     r1,#1
00000c  4819              LDR      r0,|L2.116|
00000e  f7fffffe          BL       GPIO_PinRemapConfig
;;;99     	
;;;100    	/* 打开GPIO时钟 */
;;;101    	RCC_APB2PeriphClockCmd(RCC_CS | RCC_RANGE | RCC_BUSY | RCC_RESET | RCC_CONVST, ENABLE);	
000012  2101              MOVS     r1,#1
000014  2098              MOVS     r0,#0x98
000016  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;102    	
;;;103    	/* 配置几个推完输出IO */
;;;104    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00001a  2003              MOVS     r0,#3
00001c  f88d0002          STRB     r0,[sp,#2]
;;;105    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;	/* 推挽输出模式 */
000020  2010              MOVS     r0,#0x10
000022  f88d0003          STRB     r0,[sp,#3]
;;;106    
;;;107    	GPIO_InitStructure.GPIO_Pin = PIN_RESET;
000026  0240              LSLS     r0,r0,#9
;;;108    	GPIO_Init(PORT_RESET, &GPIO_InitStructure);
000028  4d13              LDR      r5,|L2.120|
00002a  f8ad0000          STRH     r0,[sp,#0]            ;107
00002e  4669              MOV      r1,sp
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       GPIO_Init
;;;109    
;;;110    	GPIO_InitStructure.GPIO_Pin = PIN_CONVST;
000036  14a8              ASRS     r0,r5,#18
000038  f8ad0000          STRH     r0,[sp,#0]
;;;111    	GPIO_Init(PORT_CONVST, &GPIO_InitStructure);
00003c  4669              MOV      r1,sp
00003e  4628              MOV      r0,r5
000040  f7fffffe          BL       GPIO_Init
;;;112    	
;;;113    	GPIO_InitStructure.GPIO_Pin = PIN_RANGE;
000044  2408              MOVS     r4,#8
000046  f8ad4000          STRH     r4,[sp,#0]
;;;114    	GPIO_Init(PORT_RANGE, &GPIO_InitStructure);
00004a  4669              MOV      r1,sp
00004c  4628              MOV      r0,r5
00004e  f7fffffe          BL       GPIO_Init
;;;115    	
;;;116    	GPIO_InitStructure.GPIO_Pin = PIN_CS;
000052  f8ad4000          STRH     r4,[sp,#0]
;;;117    	GPIO_Init(PORT_CS, &GPIO_InitStructure);
000056  4669              MOV      r1,sp
000058  4808              LDR      r0,|L2.124|
00005a  f7fffffe          BL       GPIO_Init
;;;118    
;;;119    	/* 配置GPIO为浮动输入模式(实际上CPU复位后就是输入状态) */
;;;120    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;		/* MISO 设置为输入上拉 */
00005e  2048              MOVS     r0,#0x48
000060  f88d0003          STRB     r0,[sp,#3]
;;;121    
;;;122    	GPIO_InitStructure.GPIO_Pin = PIN_BUSY;
000064  2040              MOVS     r0,#0x40
000066  f8ad0000          STRH     r0,[sp,#0]
;;;123    	GPIO_Init(PORT_BUSY, &GPIO_InitStructure);
00006a  4669              MOV      r1,sp
00006c  4804              LDR      r0,|L2.128|
00006e  f7fffffe          BL       GPIO_Init
;;;124    }
000072  bd38              POP      {r3-r5,pc}
;;;125    
                          ENDP

                  |L2.116|
                          DCD      0x00300200
                  |L2.120|
                          DCD      0x40010c00
                  |L2.124|
                          DCD      0x40011000
                  |L2.128|
                          DCD      0x40011c00

                          AREA ||i.AD7606_ReadAdc||, CODE, READONLY, ALIGN=2

                  AD7606_ReadAdc PROC
;;;317    */
;;;318    int16_t AD7606_ReadAdc(uint8_t _ch)
000000  2101              MOVS     r1,#1
000002  f3818810          MSR      PRIMASK,r1
;;;319    {
;;;320    	int16_t sAdc;
;;;321    	
;;;322    	DISABLE_INT();	
;;;323    	sAdc = s_adc_now[_ch];
000006  4903              LDR      r1,|L3.20|
000008  f9310010          LDRSH    r0,[r1,r0,LSL #1]
;;;324    	ENABLE_INT();
00000c  2100              MOVS     r1,#0
00000e  f3818810          MSR      PRIMASK,r1
;;;325    
;;;326    	return sAdc;
;;;327    }
000012  4770              BX       lr
;;;328    
                          ENDP

                  |L3.20|
                          DCD      ||.bss||

                          AREA ||i.AD7606_Reset||, CODE, READONLY, ALIGN=2

                  AD7606_Reset PROC
;;;243    */
;;;244    void AD7606_Reset(void)
000000  b570              PUSH     {r4-r6,lr}
;;;245    {
;;;246    	/* CS  SCLK拉高 */
;;;247    #ifdef SOFT_SPI
;;;248    		AD_CS_1();
000002  2108              MOVS     r1,#8
000004  480f              LDR      r0,|L4.68|
000006  f7fffffe          BL       GPIO_SetBits
;;;249    		//SCK_1();
;;;250    #endif
;;;251    
;;;252     	/* AD7606是高电平复位，要求最小脉宽50ns */
;;;253    	AD_RESET_LOW();
00000a  4d0f              LDR      r5,|L4.72|
00000c  f44f5400          MOV      r4,#0x2000
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       GPIO_ResetBits
;;;254    	
;;;255    	AD_RESET_HIGH();
000018  4621              MOV      r1,r4
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       GPIO_SetBits
;;;256    	AD_RESET_HIGH();
000020  4621              MOV      r1,r4
000022  4628              MOV      r0,r5
000024  f7fffffe          BL       GPIO_SetBits
;;;257    	AD_RESET_HIGH();
000028  4621              MOV      r1,r4
00002a  4628              MOV      r0,r5
00002c  f7fffffe          BL       GPIO_SetBits
;;;258    	AD_RESET_HIGH();
000030  4621              MOV      r1,r4
000032  4628              MOV      r0,r5
000034  f7fffffe          BL       GPIO_SetBits
;;;259    	
;;;260    	AD_RESET_LOW();
000038  4621              MOV      r1,r4
00003a  4628              MOV      r0,r5
00003c  e8bd4070          POP      {r4-r6,lr}
000040  f7ffbffe          B.W      GPIO_ResetBits
;;;261    }
;;;262    /*
                          ENDP

                  |L4.68|
                          DCD      0x40011000
                  |L4.72|
                          DCD      0x40010c00

                          AREA ||i.AD7606_Scan||, CODE, READONLY, ALIGN=2

                  AD7606_Scan PROC
;;;287    */
;;;288    void AD7606_Scan(void) 		/* 此函数代码按照时序编写 */
000000  b570              PUSH     {r4-r6,lr}
;;;289    {
;;;290    	uint8_t i;			
;;;291    
;;;292    	/* BUSY = 0 时.ad7606处于空闲状态ad转换结束 */	
;;;293    	if (BUSY_IS_LOW())	   
000002  2140              MOVS     r1,#0x40
000004  4812              LDR      r0,|L5.80|
000006  f7fffffe          BL       GPIO_ReadInputDataBit
00000a  2800              CMP      r0,#0
00000c  d11e              BNE      |L5.76|
;;;294        {
;;;295    		AD_CS_0(); /* SPI片选 = 0 */
00000e  4e11              LDR      r6,|L5.84|
000010  2108              MOVS     r1,#8
000012  4630              MOV      r0,r6
000014  f7fffffe          BL       GPIO_ResetBits
;;;296    	
;;;297    		for (i = 0; i < CH_NUM; i++)
000018  2400              MOVS     r4,#0
;;;298    		{
;;;299    			s_adc_now[i] = bsp_spiRead1();
00001a  4d0f              LDR      r5,|L5.88|
                  |L5.28|
00001c  f7fffffe          BL       bsp_spiRead1
000020  f8250014          STRH     r0,[r5,r4,LSL #1]
;;;300    			
;;;301    			s_adc_now[i] = s_adc_now[i] * 256 + bsp_spiRead1(); /* 读数据 */	
000024  f7fffffe          BL       bsp_spiRead1
000028  f8151014          LDRB     r1,[r5,r4,LSL #1]
00002c  eb002001          ADD      r0,r0,r1,LSL #8
000030  f8250014          STRH     r0,[r5,r4,LSL #1]
000034  1c64              ADDS     r4,r4,#1
000036  b2e4              UXTB     r4,r4                 ;297
000038  2c08              CMP      r4,#8                 ;297
00003a  d3ef              BCC      |L5.28|
;;;302    		}
;;;303    	
;;;304    		AD_CS_1(); /* SPI片选 = 1 */
00003c  2108              MOVS     r1,#8
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       GPIO_SetBits
;;;305    
;;;306    		AD7606_StartConv();	/* 给开始信号 */	
000044  e8bd4070          POP      {r4-r6,lr}
000048  f7ffbffe          B.W      AD7606_StartConv
                  |L5.76|
;;;307    	}
;;;308    }	  
00004c  bd70              POP      {r4-r6,pc}
;;;309    
                          ENDP

00004e  0000              DCW      0x0000
                  |L5.80|
                          DCD      0x40011c00
                  |L5.84|
                          DCD      0x40011000
                  |L5.88|
                          DCD      ||.bss||

                          AREA ||i.AD7606_SetInputRange||, CODE, READONLY, ALIGN=2

                  AD7606_SetInputRange PROC
;;;223    */
;;;224    void AD7606_SetInputRange(uint8_t _ucRange)
000000  4a04              LDR      r2,|L6.20|
;;;225    {
;;;226    	if (_ucRange == 0)
000002  2800              CMP      r0,#0
;;;227    	{
;;;228    		AD_RANGE_5V();	/* 设置为正负5V */
;;;229    	}
;;;230    	else
;;;231    	{
;;;232    		AD_RANGE_10V();	/* 设置为正负10V */
000004  f04f0108          MOV      r1,#8
000008  4610              MOV      r0,r2
00000a  d001              BEQ      |L6.16|
00000c  f7ffbffe          B.W      GPIO_SetBits
                  |L6.16|
000010  f7ffbffe          B.W      GPIO_ResetBits
;;;233    	}
;;;234    }
;;;235    
                          ENDP

                  |L6.20|
                          DCD      0x40010c00

                          AREA ||i.AD7606_StartConv||, CODE, READONLY, ALIGN=2

                  AD7606_StartConv PROC
;;;269    */
;;;270    void AD7606_StartConv(void)
000000  b570              PUSH     {r4-r6,lr}
;;;271    {
;;;272    	/* 上升沿开始转换，低电平持续时间至少25ns  */
;;;273    	AD_CONVST_LOW();
000002  4d0a              LDR      r5,|L7.44|
000004  f44f5480          MOV      r4,#0x1000
000008  4621              MOV      r1,r4
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       GPIO_ResetBits
;;;274    	AD_CONVST_LOW();
000010  4621              MOV      r1,r4
000012  4628              MOV      r0,r5
000014  f7fffffe          BL       GPIO_ResetBits
;;;275    	AD_CONVST_LOW();	/* 连续执行2次，低电平约50ns */
000018  4621              MOV      r1,r4
00001a  4628              MOV      r0,r5
00001c  f7fffffe          BL       GPIO_ResetBits
;;;276    	
;;;277    	AD_CONVST_HIGH();
000020  4621              MOV      r1,r4
000022  4628              MOV      r0,r5
000024  e8bd4070          POP      {r4-r6,lr}
000028  f7ffbffe          B.W      GPIO_SetBits
;;;278    }
;;;279    
                          ENDP

                  |L7.44|
                          DCD      0x40010c00

                          AREA ||i.bsp_spi_InitAD7606||, CODE, READONLY, ALIGN=2

                  bsp_spi_InitAD7606 PROC
;;;66     */
;;;67     void bsp_spi_InitAD7606(void)
000000  b510              PUSH     {r4,lr}
;;;68     {
;;;69     	AD7606_ConfigGPIO();		/* 配置GPIO */
000002  f7fffffe          BL       AD7606_ConfigGPIO
;;;70     	
;;;71     #ifdef HARD_SPI
;;;72     	AD7606_CfgSpiHard();
;;;73     #endif
;;;74     	
;;;75     	AD7606_SetInputRange(g_tAD7606.Range);	/* 设置采样量程 */
000006  4806              LDR      r0,|L8.32|
000008  7800              LDRB     r0,[r0,#0]  ; g_tAD7606
00000a  f7fffffe          BL       AD7606_SetInputRange
;;;76     
;;;77     	/* 设置过采样模式 */
;;;78     	//ad7606_SetOS(0);
;;;79     	AD7606_Reset();				/* 硬件复位复AD7606 */
00000e  f7fffffe          BL       AD7606_Reset
;;;80     	
;;;81     	AD_CONVST_HIGH();			/* CONVST脚设置为高电平 */	
000012  e8bd4010          POP      {r4,lr}
000016  f44f5180          MOV      r1,#0x1000
00001a  4802              LDR      r0,|L8.36|
00001c  f7ffbffe          B.W      GPIO_SetBits
;;;82     }
;;;83     
                          ENDP

                  |L8.32|
                          DCD      ||.data||
                  |L8.36|
                          DCD      0x40010c00

                          AREA ||.bss||, DATA, NOINIT, ALIGN=1

                  s_adc_now
                          %        16

                          AREA ||.data||, DATA, ALIGN=0

                  g_tAD7606
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp\\src\\bsp_spi_ad7606.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___16_bsp_spi_ad7606_c_d0061c5a____REV16|
#line 114 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___16_bsp_spi_ad7606_c_d0061c5a____REV16| PROC
#line 115

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___16_bsp_spi_ad7606_c_d0061c5a____REVSH|
#line 128
|__asm___16_bsp_spi_ad7606_c_d0061c5a____REVSH| PROC
#line 129

 revsh r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
